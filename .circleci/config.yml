# Java CircleCI 2.1 configuration File
#
# Check https://circleci.com/docs/2.0/language-java-maven/ for more details

version: 2.1
parameters:
  scalyr_sink_version: # scalyr_sink_version needs to be updated on every new version release.
    type: string
    default: "0.1"

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/circleci-kafka-connect-scalyr # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-kafka-connect-scalyr-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-kafka-connect-scalyr-{{ checksum "pom.xml" }}

      - run: mvn verify # build and run tests

      - run:
          name: Analyze on SonarCloud
          command: mvn verify sonar:sonar

      - setup_remote_docker

      - run: # Python dependencies for System Test
          name: Python Dependencies
          command: |
            set -x
            sudo apt update
            sudo apt install python-pip
            pip install requests

      - run:
          name: System Test
          command: |
            set -x
            docker-compose up -d
            docker-compose ps

            # Wait for Kafka to be ready
            docker run --network container:kafka confluentinc/cp-kafka:latest cub kafka-ready -z zookeeper:2181 1 60

            # Configure Scalyr Sink Connector to run in distributed worker configuration
            .circleci/configure_scalyr_connector.sh

            # Verify logs are in Scalyr
            python .circleci/verify_scalyr_events.py dataset=\'accesslog\'
            python .circleci/verify_scalyr_events.py app=\'customApp\'
            python .circleci/verify_scalyr_events.py tag=\'fluentd-apache\'
            python .circleci/verify_scalyr_events.py tag=\'fluentbit-cpu\' 50

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      - persist_to_workspace:
          root: target/components/packages
          paths:
            - scalyr-kafka-connect-scalyr-sink-<< pipeline.parameters.scalyr_sink_version >>.zip
      - store_artifacts: # store the jar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/components/packages/scalyr-kafka-connect-scalyr-sink-<< pipeline.parameters.scalyr_sink_version >>.zip
          destination: kafka_connect_scalyr_plugin

  publish-github-release:
    docker:
      - image: circleci/golang:1.12
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=<< pipeline.parameters.scalyr_sink_version >>
            echo Releasing version $VERSION
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - publish-github-release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # See https://discuss.circleci.com/t/filter-job-by-tag-not-working-regexp-possibly-unsupported/28484
              only: /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.(\d|[1-9]\d*)(-(0|[1-9A-Za-z-][0-9A-Za-z-]*|[0-9]*[A-Za-z-][0-9A-Za-z-]*)(\.(0|[1-9A-Za-z-][0-9A-Za-z-]*|[0-9]*[A-Za-z-][0-9A-Za-z-]*))*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
